{"version":3,"sources":["logo.svg","components/useData.js","components/Tabla.js","components/Graph.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["useData","useState","data","setData","useEffect","console","log","navigator","language","onLine","url","startsWith","URL","fetch","then","res","json","localStorage","setItem","JSON","stringify","getItem","parse","Title","TableHeaders","Tabla","count","setSelectedData","style","textAlign","className","Table","striped","bordered","hover","map","movie","onClick","showDetail","src","ThumbnailImage","height","name","description","value","weight","type","tipo","Badge","variant","views","id","Graph","length","canvas","d3","margin","top","left","bottom","right","iwidth","iheight","svg","append","attr","g","y","domain","range","x","d","padding","selectAll","enter","bandwidth","classed","call","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","locale","StrictMode","document","getElementById","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a724baaf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import { useEffect, useState } from \"react\";\r\n\r\nconst useData = () => {\r\n  // 1\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    console.log(navigator.language);\r\n    if (!navigator.onLine) {\r\n      if (localStorage.getItem(\"movie\") === null) {\r\n        setData(\"Loading...\");\r\n      } else {\r\n        setData(JSON.parse(localStorage.getItem(\"movie\")));\r\n      }\r\n    } else {\r\n      let url = \"\";\r\n      if (navigator.language.startsWith(\"es\") ) {\r\n         url = new URL(\r\n          \"https://gist.githubusercontent.com/jhonatan89/e379fadf8ed0f5381a2d8f8f3dea90c3/raw/e2bc20df02828d297f99558551e37959ac97a6f8/pokemon-es.json \"\r\n        );\r\n      } else {\r\n         url = new URL(\r\n          \"https://gist.githubusercontent.com/jhonatan89/2089276d3ce0faceff8e55fc3459b818/raw/30ee1a77b3e328108faaaa9aaac6f2ddaa3d3711/pokemons-en.json \"\r\n        );\r\n      }\r\n      fetch(url)\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          setData(res);\r\n          localStorage.setItem(\"movie\", JSON.stringify(res));\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  // 2\r\n  return [data];\r\n};\r\n\r\nexport default useData;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table, Card, Button, Badge } from \"react-bootstrap\";\r\n//import Detail from \"./Detail\";\r\nimport useData from \"./useData\";\r\nimport { FormattedDate, FormattedPlural, FormattedNumber } from \"react-intl\";\r\n\r\nfunction Tabla() {\r\n  let hola = {};\r\n  let count = 0;\r\n  const [data] = useData();\r\n  const [selectedData, setSelectedData] = useState([]);\r\n  function showDetail(movie) {\r\n    hola = movie;\r\n    setSelectedData(movie);\r\n    setSelectedData(movie);\r\n  }\r\n\r\n  function Detail() {\r\n    if(selectedData.name!=undefined){\r\n    return (\r\n      <div>\r\n        <Card style={{ width: \"90%\" }}>\r\n          <Card.Img variant=\"top\" src={selectedData.poster} />\r\n          <Card.Body>\r\n            <Card.Title>{selectedData.name}</Card.Title>\r\n            <Card.Text>{selectedData.description}</Card.Text>\r\n            <Card.Text>Cast: {selectedData.cast}</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );}\r\n    else{\r\n      return(<div></div>);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      \r\n      <h1 style={{textAlign: \"center\"}}>{Title()}</h1>\r\n      <div className=\"row\">\r\n      <div className=\"col-1\"></div>\r\n        <div className=\"col-10\">\r\n          <Table striped bordered hover>\r\n            <thead className=\"thead-dark\">{TableHeaders()}</thead>\r\n            <tbody>\r\n              {data.map((movie) => {\r\n                count += 1;\r\n                return (\r\n                  <tr onClick={() => showDetail(movie)}>\r\n                    <td key={\"c\" + count}> {count}</td>\r\n                    <td key={movie.ThumbnailImage}><img src={movie.ThumbnailImage} height=\"60px\" /></td>\r\n                    <td key={movie.name}>{movie.name}</td>\r\n                    <td key={movie.description}>{movie.description}</td>\r\n                    <td key={\"bud\" + movie.height}>\r\n                    <FormattedNumber value={movie.height} />\r\n                      \r\n                    </td>\r\n                    <td key={\"bud\" + movie.weight}>\r\n                    <FormattedNumber value={movie.weight}/>\r\n                      \r\n                    </td>\r\n                    <td key={movie.views}>{movie.type.map((tipo)=>{\r\n                      return(\r\n                        <Badge variant=\"secondary\">{tipo}</Badge>\r\n                      );\r\n                    })}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n        <div className=\"col-4\" id=\"detail\">\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Title(){\r\n  if (navigator.language.startsWith(\"es\") ) {\r\n    return \"Pokemóns más buscados\";\r\n  }\r\n  else{\r\n    return \"Most wanted Pokemons\"\r\n  }\r\n}\r\n\r\nfunction Plural(){\r\n  if (navigator.language.startsWith(\"es\") ) {\r\n    return [\"millon\", \"millones\"];\r\n  }\r\n  else{\r\n    return [\"million\", \"millions\"]\r\n  }\r\n}\r\n\r\nfunction TableHeaders() {\r\n  if (navigator.language.startsWith(\"es\") ) {\r\n    console.log(\"entre\");\r\n    return (\r\n      <tr>\r\n        <th>#</th>\r\n        <th>Imagen</th>\r\n        <th>Nombre</th>\r\n        <th>Descripción</th>\r\n        <th>Altura</th>\r\n        <th>Peso</th>\r\n        <th>Tipo</th>\r\n      </tr>\r\n    );\r\n  } else {\r\n    return (\r\n      <tr>\r\n        <th>#</th>\r\n        <th>Image</th>\r\n        <th>Name</th>\r\n        <th>Description</th>\r\n        <th>Height</th>\r\n        <th>Weight</th>\r\n        <th>Type</th>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tabla;\r\n","import * as d3 from \"d3\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport useData from \"./useData\";\r\n\r\nfunction Graph() {\r\n  const [data] = useData();\r\n  console.log(data);\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      const canvas = d3.select(\"#canvas\");\r\n      const width = 700;\r\n      const height = 500;\r\n      const margin = { top: 10, left: 80, bottom: 40, right: 10 };\r\n      const iwidth = width - margin.left - margin.right;\r\n      const iheight = height - margin.top - margin.bottom;\r\n\r\n      const svg = canvas.append(\"svg\");\r\n      svg.attr(\"width\", width);\r\n      svg.attr(\"height\", height);\r\n\r\n      let g = svg\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n      const y = d3.scaleLinear().domain([0, 1200]).range([iheight, 0]);\r\n\r\n      const x = d3\r\n        .scaleBand()\r\n        .domain(data.map((d) => d.name))\r\n        .range([0, iwidth])\r\n        .padding(0.1);\r\n\r\n      const bars = g.selectAll(\"rect\").data(data);\r\n\r\n      bars\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"class\", \"bar\")\r\n        .style(\"fill\", \"steelblue\")\r\n        .attr(\"x\", (d) => x(d.name))\r\n        .attr(\"y\", (d) => y(d.height))\r\n        .attr(\"height\", (d) => iheight - y(d.height))\r\n        .attr(\"width\", x.bandwidth());\r\n\r\n      g.append(\"g\")\r\n        .classed(\"x--axis\", true)\r\n        .call(d3.axisBottom(x))\r\n        .attr(\"transform\", `translate(0, ${iheight})`);\r\n\r\n      g.append(\"g\").classed(\"y--axis\", true).call(d3.axisLeft(y));\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"canvas\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Tabla from './components/Tabla';\r\nimport Graph from './components/Graph';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Tabla />\r\n      <Graph></Graph>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {IntlProvider} from 'react-intl';\r\n\r\n\r\nReactDOM.render(\r\n  <IntlProvider locale={navigator.language}>\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  </IntlProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}