{"version":3,"sources":["logo.svg","components/useData.js","components/Tabla.js","components/Graph.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["useData","useState","data","setData","useEffect","console","log","navigator","language","onLine","url","URL","fetch","then","res","json","localStorage","setItem","JSON","stringify","getItem","parse","Title","Plural","TableHeaders","Tabla","count","selectedData","setSelectedData","Detail","undefined","name","Card","style","width","Img","variant","src","poster","Body","Text","description","cast","className","Table","striped","bordered","hover","map","movie","onClick","showDetail","directedBy","country","budget","value","one","other","Date","releaseDate","year","month","day","views","id","Graph","length","canvas","d3","margin","top","left","bottom","right","iwidth","iheight","svg","append","attr","g","y","domain","range","x","d","padding","selectAll","enter","bandwidth","classed","call","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","locale","StrictMode","document","getElementById","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ce6d0d39.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import { useEffect, useState } from \"react\";\r\n\r\nconst useData = () => {\r\n  // 1\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    console.log(navigator.language);\r\n    if (!navigator.onLine) {\r\n      if (localStorage.getItem(\"movie\") === null) {\r\n        setData(\"Loading...\");\r\n      } else {\r\n        setData(JSON.parse(localStorage.getItem(\"movie\")));\r\n      }\r\n    } else {\r\n      let url = \"\";\r\n      if (navigator.language == \"es-ES\") {\r\n         url = new URL(\r\n          \"https://gist.githubusercontent.com/josejbocanegra/f784b189117d214578ac2358eb0a01d7/raw/2b22960c3f203bdf4fac44cc7e3849689218b8c0/data-es.json\"\r\n        );\r\n      } else {\r\n         url = new URL(\r\n          \"https://gist.githubusercontent.com/josejbocanegra/8b436480129d2cb8d81196050d485c56/raw/48cc65480675bf8b144d89ecb8bcd663b05e1db0/data-en.json\"\r\n        );\r\n      }\r\n      fetch(url)\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          setData(res);\r\n          localStorage.setItem(\"movie\", JSON.stringify(res));\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  // 2\r\n  return [data];\r\n};\r\n\r\nexport default useData;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table, Card, Button } from \"react-bootstrap\";\r\n//import Detail from \"./Detail\";\r\nimport useData from \"./useData\";\r\nimport { FormattedDate, FormattedPlural, FormattedNumber } from \"react-intl\";\r\n\r\nfunction Tabla() {\r\n  let hola = {};\r\n  let count = 0;\r\n  const [data] = useData();\r\n  const [selectedData, setSelectedData] = useState([]);\r\n  function showDetail(movie) {\r\n    hola = movie;\r\n    setSelectedData(movie);\r\n    setSelectedData(movie);\r\n  }\r\n\r\n  function Detail() {\r\n    if(selectedData.name!=undefined){\r\n    return (\r\n      <div>\r\n        <Card style={{ width: \"90%\" }}>\r\n          <Card.Img variant=\"top\" src={selectedData.poster} />\r\n          <Card.Body>\r\n            <Card.Title>{selectedData.name}</Card.Title>\r\n            <Card.Text>{selectedData.description}</Card.Text>\r\n            <Card.Text>Cast: {selectedData.cast}</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );}\r\n    else{\r\n      return(<div></div>);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{Title()}</h1>\r\n      <div className=\"row\">\r\n        <div className=\"col-8\">\r\n          <Table striped bordered hover>\r\n            <thead>{TableHeaders()}</thead>\r\n            <tbody>\r\n              {data.map((movie) => {\r\n                count += 1;\r\n                return (\r\n                  <tr onClick={() => showDetail(movie)}>\r\n                    <td key={\"c\" + count}> {count}</td>\r\n                    <td key={movie.name}>{movie.name}</td>\r\n                    <td key={movie.directedBy}>{movie.directedBy}</td>\r\n                    <td key={movie.country}>{movie.country}</td>\r\n                    <td key={\"bud\" + movie.budget}>\r\n                    {movie.budget} <FormattedPlural\r\n                        value={movie.budget}\r\n                        one={Plural()[0]}\r\n                        other={Plural()[1]}\r\n                      />\r\n                      \r\n                    </td>\r\n                    <td key={movie.releaseDate}>\r\n                      <FormattedDate\r\n                        value={new Date(movie.releaseDate)}\r\n                        year=\"numeric\"\r\n                        month=\"numeric\"\r\n                        day=\"numeric\"\r\n                      />\r\n                    </td>\r\n                    <td key={movie.views}><FormattedNumber value={movie.views}/></td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n        <div className=\"col-4\" id=\"detail\">\r\n          <Detail></Detail>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Title(){\r\n  if (navigator.language == \"es-ES\") {\r\n    return \"Películas\";\r\n  }\r\n  else{\r\n    return \"Movies\"\r\n  }\r\n}\r\n\r\nfunction Plural(){\r\n  if (navigator.language == \"es-ES\") {\r\n    return [\"millon\", \"millones\"];\r\n  }\r\n  else{\r\n    return [\"million\", \"millions\"]\r\n  }\r\n}\r\n\r\nfunction TableHeaders() {\r\n  if (navigator.language == \"es-ES\") {\r\n    console.log(\"entre\");\r\n    return (\r\n      <tr>\r\n        <th>#</th>\r\n        <th>Nombre</th>\r\n        <th>Dirijido por</th>\r\n        <th>País</th>\r\n        <th>Presupuesto</th>\r\n        <th>Lanzamiento</th>\r\n        <th>Visualizaciones</th>\r\n      </tr>\r\n    );\r\n  } else {\r\n    return (\r\n      <tr>\r\n        <th>#</th>\r\n        <th>Name</th>\r\n        <th>Directed by</th>\r\n        <th>Country</th>\r\n        <th>Budget</th>\r\n        <th>Release</th>\r\n        <th>Views</th>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tabla;\r\n","import * as d3 from \"d3\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport useData from \"./useData\";\r\n\r\nfunction Graph() {\r\n  const [data] = useData();\r\n  console.log(data);\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      const canvas = d3.select(\"#canvas\");\r\n      const width = 700;\r\n      const height = 500;\r\n      const margin = { top: 10, left: 80, bottom: 40, right: 10 };\r\n      const iwidth = width - margin.left - margin.right;\r\n      const iheight = height - margin.top - margin.bottom;\r\n\r\n      const svg = canvas.append(\"svg\");\r\n      svg.attr(\"width\", width);\r\n      svg.attr(\"height\", height);\r\n\r\n      let g = svg\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n      const y = d3.scaleLinear().domain([0, 10000000]).range([iheight, 0]);\r\n\r\n      const x = d3\r\n        .scaleBand()\r\n        .domain(data.map((d) => d.name))\r\n        .range([0, iwidth])\r\n        .padding(0.1);\r\n\r\n      const bars = g.selectAll(\"rect\").data(data);\r\n\r\n      bars\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"class\", \"bar\")\r\n        .style(\"fill\", \"steelblue\")\r\n        .attr(\"x\", (d) => x(d.name))\r\n        .attr(\"y\", (d) => y(d.views))\r\n        .attr(\"height\", (d) => iheight - y(d.views))\r\n        .attr(\"width\", x.bandwidth());\r\n\r\n      g.append(\"g\")\r\n        .classed(\"x--axis\", true)\r\n        .call(d3.axisBottom(x))\r\n        .attr(\"transform\", `translate(0, ${iheight})`);\r\n\r\n      g.append(\"g\").classed(\"y--axis\", true).call(d3.axisLeft(y));\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"canvas\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Tabla from './components/Tabla';\nimport Graph from './components/Graph';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabla />\n      <Graph></Graph>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport {IntlProvider} from 'react-intl';\n\n\nReactDOM.render(\n  <IntlProvider locale={navigator.language}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </IntlProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}